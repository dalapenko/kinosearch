package tech.dalapenko.filmdetails.model.entity

import tech.dalapenko.network.dto.CountryDto
import tech.dalapenko.network.dto.FilmDto
import tech.dalapenko.network.dto.GenreDto

data class Film(
    val id: Int,
    val hdId: String?,
    val imdbId: String?,
    val ruName: String?,
    val enName: String?,
    val originName: String?,
    val posterUrl: String?,
    val posterUrlPreview: String?,
    val coverUrl: String?,
    val logoUrl: String?,
    val reviewsCount: Int?,
    val ratingGoodReview: Float?,
    val ratingGoodReviewVoteCount: Int?,
    val ratingKinopoisk: Float?,
    val ratingKinopoiskVoteCount: Int?,
    val ratingImdb: Float?,
    val ratingImdbVoteCount: Int?,
    val ratingFilmCritics: Float?,
    val ratingFilmCriticsVoteCount: Int?,
    val ratingAwait: Float?,
    val ratingAwaitCount: Int?,
    val ratingRfCritics: Float?,
    val ratingRfCriticsVoteCount: Int?,
    val webUrl: String?,
    val year: Int?,
    val filmLength: Int?,
    val slogan: String?,
    val description: String?,
    val shortDescription: String?,
    val editorAnnotation: String?,
    val isTicketsAvailable: Boolean?,
    val productionStatus: String?,
    val type: String?,
    val ratingMpaa: String?,
    val ratingAgeLimits: String?,
    val hasImax: Boolean?,
    val has3D: Boolean?,
    val lastSync: String?,
    val countryList: List<String>,
    val genreList: List<String>,
    val startYear: Int?,
    val endYear: Int?,
    val serial: Boolean?,
    val shortFilm: Boolean?,
    val completed: Boolean?
) {

    companion object {
        fun mapFromDto(dto: FilmDto): Film {
            return Film(
                id = dto.id ?: -1,
                hdId = dto.hdId,
                imdbId = dto.imdbId,
                ruName = dto.nameRu,
                enName = dto.nameEn,
                originName = dto.nameOriginal,
                posterUrl = dto.posterUrl,
                posterUrlPreview = dto.posterUrlPreview,
                coverUrl = dto.coverUrl,
                logoUrl = dto.logoUrl,
                reviewsCount = dto.reviewsCount,
                ratingGoodReview = dto.ratingGoodReview,
                ratingGoodReviewVoteCount = dto.ratingGoodReviewVoteCount,
                ratingKinopoisk = dto.ratingKinopoisk,
                ratingKinopoiskVoteCount = dto.ratingKinopoiskVoteCount,
                ratingImdb = dto.ratingImdb,
                ratingImdbVoteCount = dto.ratingImdbVoteCount,
                ratingFilmCritics = dto.ratingFilmCritics,
                ratingFilmCriticsVoteCount = dto.ratingFilmCriticsVoteCount,
                ratingAwait = dto.ratingAwait,
                ratingAwaitCount = dto.ratingAwaitCount,
                ratingRfCritics = dto.ratingRfCritics,
                ratingRfCriticsVoteCount = dto.ratingRfCriticsVoteCount,
                webUrl = dto.webUrl,
                year = dto.year,
                filmLength = dto.filmLength,
                slogan = dto.slogan,
                description = dto.description,
                shortDescription = dto.description,
                editorAnnotation = dto.shortDescription,
                isTicketsAvailable = dto.isTicketsAvailable,
                productionStatus = dto.productionStatus,
                type = dto.type,
                ratingMpaa = dto.ratingMpaa,
                ratingAgeLimits = dto.ratingAgeLimits,
                hasImax = dto.hasImax,
                has3D = dto.has3D,
                lastSync = dto.lastSync,
                countryList = dto.countries?.mapNotNull(CountryDto::country) ?: emptyList(),
                genreList = dto.genres?.mapNotNull(GenreDto::genre) ?: emptyList(),
                startYear = dto.startYear,
                endYear = dto.endYear,
                serial = dto.serial,
                shortFilm = dto.shortFilm,
                completed = dto.completed
            )
        }
    }
}